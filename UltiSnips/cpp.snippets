extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet wx "Insert class header derived from wx Class"
class ${1:NameOfClass} : public ${2: wxPanel}
{
public:
    $1(${3:wxWindow *parent});
private:
    void create_widgets();
    void set_properties();
    void attach_events();
    void do_layout();
};
endsnippet

snippet wx "Implement class derived from wx Class"
${1:NameOfClass}::$1(${3:wxWindow *parent})
: ${2: wxPanel(parent)}
{
    create_widgets();
    set_properties();
    attach_events();
    do_layout();
}

void $1::create_widgets()
{

}

void $1::set_properties()
{

}

void $1::attach_events()
{

}

void $1::do_layout()
{

}
endsnippet

# vim:ft=snippets:
