global !p

import re

def extract_function_stuff(text):
    ''' Extract the function name from a line of C code

    returns a tuple of type:
        (function return type, function name, function args)
    '''
    matchObj = re.search(r'([0-9A-Za-z_*]+ [*]*)([_0-9a-zA-Z]+)\((.*[\r\n]*.*)\)', text)
    if matchObj is None: 
        return ('','','')
    funRetType = matchObj.group(1)
    funName = matchObj.group(2)
    funArgs = matchObj.group(3)
    return (funRetType, funName, funArgs)

def parse_c_args(text):
    ''' Return list of names from text inside c-func parentheses
    '''
    if text is 'void':
        return ''
    splitList = text.split(',')
    nameList = []
    for i in splitList:
        nameList.append(i.split(' ')[-1].strip('*[]'))
    return nameList

def get_doxy_arg_docs(argList):
    ''' Convert a list of c-func argument names to string of doxygen @param tags
    '''
    retStr = ''
    if argList is '':
        retStr += ''
        return retStr
    longest = max([len(i) for i in argList]) # Find longest-len arg
    for i in argList:
        i += ' ' * (longest - len(i)) # Pad with space to match longest
        retStr += '\n @param    %s - @todo: add description of %s' % (i,i)
    return retStr

endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet def "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* $1 */
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL:code}$0
#endif /* $1 */
endsnippet

snippet inc" "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc< "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char const *argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet for "for int loop (fori)"
for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${0:/* code */}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${0:/* code */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet c4 "create function with doxy documentation" b
/******************************************************************************
 @fn       $2

           ${4:Description of function goes here}
`!p
argNames = parse_c_args(t[3])
snip.rv = get_doxy_arg_docs(argNames)
`

 @return   `!p snip.rv = ('void' if t[1] == 'void' else '@todo: Describe return value') `
******************************************************************************/

${1:void} ${2:function}(${3:void})
{
	${0}
}
endsnippet

snippet cpp "insert c blocks into cpp files" b
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

${VISUAL:/* code */}

#ifdef __cplusplus
}
#endif /* __cplusplus */
endsnippet

snippet c4 "Generate doxy tag from existing C-function" b
/******************************************************************************
 @fn       `!p
(funRet, funName, funArgs) = extract_function_stuff(t[1])
snip.rv = funName
`

           ${2:Description of function goes here}
`!p
argNames = parse_c_args(funArgs)
snip.rv = get_doxy_arg_docs(argNames)
`

 @return   `!p snip.rv = ('void' if funRet == 'void' else '@todo: Describe return for %s' %funName)`
******************************************************************************/
${1:${VISUAL}}
endsnippet

# vim:ft=snippets:

